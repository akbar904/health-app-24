{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is built using the Stacked architecture, which provides a structured approach to state management, routing, and dependency injection. The app features a main 'Home' view, a 'Startup' view for initialization logic, and several custom UI components such as a 'Notice' bottom sheet and an 'InfoAlert' dialog. The app allows users to interact with a to-do list, including creating, updating, deleting, and toggling the status of to-do items.",
  "architecture_overview": "The application follows the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The 'app' folder contains the main app structure, including routes, services, bottom sheets, and dialogs. The 'features' folder houses the main views and view models, while the 'ui' folder contains reusable UI components and common utilities.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog functionality in the application. It defines the available dialog types and registers custom dialog builders with the DialogService, enabling the application to display various types of dialogs throughout the user interface.",
      "class_diagram": "@startuml\n\nclass DialogType {\n    infoAlert\n}\n\nclass DialogBuilder {\n    build(context, request, completer): Widget\n}\n\nclass DialogService {\n    registerCustomDialogBuilders(builders: Map<DialogType, DialogBuilder>)\n}\n\nDialogType --> DialogBuilder : builds\nDialogService --> DialogBuilder : registers\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the dialog functionality by registering custom dialog builders with the DialogService. It defines the available dialog types and associates each type with a corresponding dialog builder.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the bottom sheet UI in the application. It defines the different types of bottom sheets available and provides a method to register the corresponding builders with the BottomSheetService.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder> builders)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  NoticeSheet(SheetRequest request, Function(SheetResponse) completer)\n}\n\nBottomSheetService <-- setupBottomSheetUi : Interacts with\nBottomSheetType --> NoticeSheet : Builders for\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders for the different BottomSheetType values. It retrieves the BottomSheetService instance from the service locator and registers the builders, which are responsible for creating the corresponding bottom sheet UI components.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing of the Flutter application. It provides a centralized and type-safe way to define and access the application's navigation routes, ensuring consistency and maintainability throughout the codebase.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  + List<RouteDef> get routes\n  + Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass Routes {\n  + static const homeView\n  + static const startupView\n  + static const all\n}\n\nclass NavigatorStateExtension {\n  + Future<dynamic> navigateToHomeView()\n  + Future<dynamic> navigateToStartupView()\n  + Future<dynamic> replaceWithHomeView()\n  + Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "StackedRouter",
          "description": "The main class responsible for managing the application's navigation routes. It defines the available routes and provides a mapping between route names and the corresponding page widgets.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "navigateToHomeView",
          "description": "A navigation extension method that allows the application to navigate to the HomeView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "A navigation extension method that allows the application to navigate to the StartupView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "A navigation extension method that allows the application to replace the current route with the HomeView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "A navigation extension method that allows the application to replace the current route with the StartupView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates = true",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/features/home/home_view.dart",
        "my_app/features/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up and managing the dependency injection system used throughout the application. It is part of the core application infrastructure and plays a crucial role in ensuring the application's components are properly wired together and can communicate effectively.",
      "class_diagram": "@startuml\nclass StackedLocator {\n    +instance: StackedLocator\n    +registerEnvironment()\n    +registerLazySingleton()\n}\n\nclass BottomSheetService\nclass DialogService\nclass NavigationService\n\nStackedLocator *-- BottomSheetService\nStackedLocator *-- DialogService\nStackedLocator *-- NavigationService\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "Initializes the dependency injection system by registering the necessary services and configuring the environment.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is responsible for managing the core application state and functionality in a Flutter application. It serves as the view model for the main application UI, handling user interactions, data transformations, and state management.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "N/A",
          "description": "The `AppViewModel` class does not contain any public methods. It inherits from the `BaseViewModel` class provided by the `stacked` package, which handles the basic state management and lifecycle hooks.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is a view model that is responsible for managing the state and behavior of the notice sheet UI component in the application. It extends the BaseViewModel class from the stacked package, which provides a foundation for implementing the MVVM (Model-View-ViewModel) architectural pattern.",
      "class_diagram": "@startuml\n  class NoticeSheetModel {\n  }\n  NoticeSheetModel -up-|> BaseViewModel\n  @enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/todo_filter/todo_filter_sheet.dart",
      "description": "This Dart file defines the `TodoFilterSheet` widget, which is responsible for providing a bottom sheet interface for filtering a list of todo items. It allows the user to view all todos, as well as filter by completed or incomplete status.",
      "class_diagram": "@startuml\nclass TodoFilterSheet {\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the user interface for the TodoFilterSheet, which includes buttons for filtering todos by status (all, incomplete, or complete).",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/todo.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_confirm/todo_confirm_dialog.dart",
      "description": "This Dart file defines a custom dialog widget called `TodoConfirmDialog` that is used to display a confirmation dialog for a todo action. It provides a simple way to show a dialog with a title, description, and confirmation buttons to the user.",
      "class_diagram": "@startuml\n  class TodoConfirmDialog {\n    + TodoConfirmDialog(request: DialogRequest, completer: Function(DialogResponse))\n    + Widget build(BuildContext context)\n  }\n  @enduml",
      "methods": [
        {
          "name": "TodoConfirmDialog",
          "description": "The constructor for the `TodoConfirmDialog` widget. It takes a `DialogRequest` object, which contains the title and description for the dialog, and a `completer` function that is called when the user interacts with the dialog (either confirms or cancels the action).",
          "parameters": [
            "DialogRequest",
            "Function(DialogResponse)"
          ],
          "return_type": null
        },
        {
          "name": "build",
          "description": "The `build` method that constructs the UI of the `TodoConfirmDialog` widget. It creates a `Dialog` widget with a title, description, and two buttons (Cancel and Confirm) that call the `completer` function with the appropriate `DialogResponse` object.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/todo_item.dart",
      "description": "This file defines the TodoItem widget, which is responsible for rendering a single todo item in a todo list application. It provides the core functionality to display, toggle the status, edit, and delete a todo item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +final Todo todo\n  +final VoidCallback onToggle\n  +final VoidCallback onDelete\n  +final VoidCallback onEdit\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for a single todo item, including a checkbox to toggle the status, the title and description, and buttons to edit and delete the item.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines the `InfoAlertDialog` widget, which is responsible for displaying an informational alert dialog in the application. The dialog is used to present important information to the user, typically in response to a user action or system event.",
      "class_diagram": "@startuml\nclass InfoAlertDialog extends StackedView<InfoAlertDialogModel> {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, InfoAlertDialogModel, Widget?)\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nclass DialogRequest {\n  + title: String\n  + description: String\n}\n\nclass DialogResponse {\n  + confirmed: bool\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `InfoAlertDialog` widget, including the dialog title, description, and a 'Got it' button that the user can tap to dismiss the dialog.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides the `InfoAlertDialogModel` instance that powers the business logic of the `InfoAlertDialog` widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the application's to-do list functionality. It provides an interface for creating, reading, updating, and deleting to-do items, as well as for toggling their completion status.",
      "class_diagram": "@startuml\nclass TodoService {\n  + getTodos(TodoStatus?: filterStatus): List<Todo>\n  + addTodo(title: String, description: String): void\n  + toggleTodoStatus(todoId: String): void\n  + deleteTodo(todoId: String): void\n  + updateTodo(todoId: String, title: String, description: String): void\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves a list of all to-do items, optionally filtered by their completion status.",
          "parameters": [
            "TodoStatus? filterStatus"
          ],
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new to-do item with the given title and description.",
          "parameters": [
            "String title",
            "String description"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Toggles the completion status of a to-do item with the given ID.",
          "parameters": [
            "String todoId"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a to-do item with the given ID from the list.",
          "parameters": [
            "String todoId"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates the title and description of a to-do item with the given ID.",
          "parameters": [
            "String todoId",
            "String title",
            "String description"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "lib/models/todo.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "The `Todo` class represents a single task or item in a to-do list application. It encapsulates the essential details of a todo item, including its unique identifier, title, description, status (incomplete or complete), creation date, and completion date (if applicable). This class provides the core data model for managing todo items in the application.",
      "class_diagram": "@startuml\nclass Todo {\n  -String id\n  -String title\n  -String description\n  -TodoStatus status\n  -DateTime createdAt\n  -DateTime? completedAt\n  +Todo copyWith()\n}\n\nenum TodoStatus {\n  incomplete,\n  complete\n}\n@enduml",
      "methods": [
        {
          "name": "Todo",
          "description": "The constructor for the `Todo` class, which allows creating a new todo item with the required fields (id, title, description, and creation date) and optional fields (status and completion date).",
          "parameters": [
            "id",
            "title",
            "description",
            "status",
            "createdAt",
            "completedAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "copyWith",
          "description": "A method that creates a new `Todo` instance with updated values for one or more of the fields, allowing for easy modification of existing todo items.",
          "parameters": [
            "id",
            "title",
            "description",
            "status",
            "createdAt",
            "completedAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "props",
          "description": "An overridden method from the `Equatable` class, which returns a list of the object's properties that are used for equality comparison and hashing.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/ui/widgets/todo_input.dart",
      "description": "The `TodoInput` widget is a reusable UI component that provides a form for users to create new todo items. It handles user input for the todo title and description, and allows the user to submit the new todo by calling a provided callback function.",
      "class_diagram": "@startuml\nclass TodoInput {\n  -TextEditingController titleController\n  -TextEditingController descriptionController\n  -VoidCallback onSubmit\n  -String submitButtonText\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the TodoInput widget, which includes text fields for the title and description, and a submit button.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant colors that are used throughout the application's UI. It provides a centralized and consistent way to manage the application's color palette, making it easier to maintain and update the visual style of the app.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This file defines a Flutter widget called `NoticeSheet` that represents a bottom sheet UI component. The primary purpose of this component is to display a notice or alert to the user in a visually appealing and user-friendly manner.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +builder(BuildContext, NoticeSheetModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): NoticeSheetModel\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "This method is responsible for building the UI of the `NoticeSheet` widget. It takes the current `BuildContext`, a `NoticeSheetModel` instance, and an optional child widget as parameters, and returns the final widget to be rendered.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "This method is responsible for creating a new instance of the `NoticeSheetModel`, which is the view model for the `NoticeSheet` widget. It takes the current `BuildContext` as a parameter and returns the new `NoticeSheetModel` instance.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a collection of UI helper functions and constants to simplify the development of a consistent and responsive user interface in a Flutter application. It encapsulates common UI patterns and layout utilities, allowing developers to easily create well-structured, visually appealing, and responsive UI components.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  +const horizontalSpaceTiny: Widget\n  +const horizontalSpaceSmall: Widget\n  +const horizontalSpaceMedium: Widget\n  +const horizontalSpaceLarge: Widget\n  +const verticalSpaceTiny: Widget\n  +const verticalSpaceSmall: Widget\n  +const verticalSpaceMedium: Widget\n  +const verticalSpaceLarge: Widget\n  +const verticalSpaceMassive: Widget\n  +const spacedDivider: Widget\n  +static verticalSpace(double height): Widget\n  +static screenWidth(BuildContext context): double\n  +static screenHeight(BuildContext context): double\n  +static screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +static screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +static halfScreenWidth(BuildContext context): double\n  +static thirdScreenWidth(BuildContext context): double\n  +static quarterScreenWidth(BuildContext context): double\n  +static getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  +static getResponsiveSmallFontSize(BuildContext context): double\n  +static getResponsiveMediumFontSize(BuildContext context): double\n  +static getResponsiveLargeFontSize(BuildContext context): double\n  +static getResponsiveExtraLargeFontSize(BuildContext context): double\n  +static getResponsiveMassiveFontSize(BuildContext context): double\n  +static getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "horizontalSpaceSmall",
          "description": "A constant widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "horizontalSpaceMedium",
          "description": "A constant widget that provides a medium horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "horizontalSpaceLarge",
          "description": "A constant widget that provides a large horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceTiny",
          "description": "A constant widget that provides a small vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceSmall",
          "description": "A constant widget that provides a small vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceMedium",
          "description": "A constant widget that provides a medium vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceLarge",
          "description": "A constant widget that provides a large vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceMassive",
          "description": "A constant widget that provides a massive vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "spacedDivider",
          "description": "A constant widget that provides a vertically spaced divider.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a vertical spacing widget with a given height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "A function that returns the height of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "A function that returns a fraction of the current screen height, considering optional offsets and maximum values.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "A function that returns a fraction of the current screen width, considering optional offsets and maximum values.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "A function that returns half the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "A function that returns one-third the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "A function that returns one-quarter the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "A function that returns a responsive medium horizontal spacing based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "A function that returns a responsive small font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "A function that returns a responsive medium font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "A function that returns a responsive large font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "A function that returns a responsive extra-large font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "A function that returns a responsive massive font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that returns a responsive font size based on the current screen width and a specified font size and maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Fetch initial todos\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Create new todo\nHomeView -> HomeViewModel: Add new todo\nHomeViewModel -> TodoService: Add todo\nUser -> HomeView: Toggle todo status\nHomeView -> HomeViewModel: Toggle todo status\nHomeViewModel -> TodoService: Toggle todo status\nUser -> HomeView: Delete todo\nHomeView -> HomeViewModel: Delete todo\nHomeViewModel -> TodoService: Delete todo\nUser -> HomeView: Show bottom sheet\nHomeView -> HomeViewModel: Show bottom sheet\nHomeViewModel -> BottomSheetService: Show notice bottom sheet\nUser -> HomeView: Show dialog\nHomeView -> HomeViewModel: Show dialog\nHomeViewModel -> DialogService: Show info alert dialog\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. The ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, allowing the ViewModels to access services such as the TodoService, BottomSheetService, and DialogService. The ViewModels update the UI by notifying their respective Views, which then rebuild with the new state.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs the AppView. The AppView initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart, which provides type-safe navigation methods. The app also uses the DialogService and BottomSheetService to display custom dialogs and bottom sheets, respectively."
}