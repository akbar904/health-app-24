{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is built using the Stacked architecture and features routing, dependency injection, and management of dialogs and bottom sheets. It includes a home view with a counter that can be incremented, and the ability to display custom dialogs and bottom sheets. The application also has a startup view that handles the initial application setup and navigation to the home view.",
  "architecture_overview": "The application follows the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The app.dart file defines the app structure, including routes, services, bottom sheets, and dialogs. The app.router.dart file manages navigation and routing, while app.locator.dart sets up the dependency injection. The application also includes reusable UI components, such as the AddTodoFAB and TodoEmptyState widgets.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_fab.dart",
      "description": "This Dart file defines a custom Floating Action Button (FAB) widget called `AddTodoFAB` that is responsible for handling the addition of new todo items in a todo list application.",
      "class_diagram": "@startuml\nclass AddTodoFAB extends StatelessWidget {\n  -VoidCallback onPressed\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the AddTodoFAB widget, which is a FloatingActionButton with an 'add' icon that calls the provided onPressed callback when pressed.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the dependency injection and service locator for the Flutter application. It is a generated file, which means it is automatically created by the Stacked Service Locator Generator, a tool used in the Stacked architecture pattern.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method sets up the service locator by registering various dependencies, such as BottomSheetService, DialogService, and NavigationService, as singletons. It also allows for the registration of custom environments and environment filters.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet with a notice or alert message to the user. It serves as a reusable component for displaying important information or notifications within the application.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +Widget builder(BuildContext, NoticeSheetModel, Widget?)\n  +NoticeSheetModel viewModelBuilder(BuildContext)\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet o-- NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the notice sheet, displaying the title and description provided in the `SheetRequest`.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides a new instance of the `NoticeSheetModel` to be used in the `StackedView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI in the Flutter application. It defines the different types of bottom sheets that can be used and provides a centralized setup function to configure the bottom sheet service.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder> builders)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\nclass NoticeSheet {\n  + NoticeSheet(request, completer)\n}\n\nBottomSheetService *-- BottomSheetType\nBottomSheetService *-- NoticeSheet\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This function sets up the custom bottom sheet builders for the different bottom sheet types defined in the BottomSheetType enum.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location for managing and accessing the app's primary and secondary color palettes.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is responsible for managing the state and behavior of the notice bottom sheet UI component in the application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the view model for an information alert dialog in a Flutter application. It is responsible for managing the state and behavior of the dialog, which is used to display important information to the user.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the custom dialog UI in the Flutter application. It defines the available dialog types, registers the dialog builders with the DialogService, and ensures a consistent and centralized approach to displaying dialogs across the app.",
      "class_diagram": "@startuml\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  build(context, request, completer): Widget\n}\n\nclass DialogService {\n  registerCustomDialogBuilders(builders: Map<DialogType, DialogBuilder>)\n}\n\nclass InfoAlertDialog {\n  InfoAlertDialog(request, completer)\n}\n\nDialogType <-- DialogService\nDialogBuilder <-- DialogService\nInfoAlertDialog .> DialogBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers the custom dialog builders with the DialogService, allowing the application to display dialogs of various types (e.g., InfoAlertDialog) in a consistent and centralized manner.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_empty_state.dart",
      "description": "This file defines a stateless widget called `TodoEmptyState` that represents an empty state for a todo list. It is designed to be displayed when the user has not yet added any tasks to the todo list.",
      "class_diagram": "@startuml\nclass TodoEmptyState implements StatelessWidget {\n  + build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget's UI, which consists of an icon, a title, and a description indicating that the user should add a new task.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is responsible for managing the state and behavior of the main application in a Flutter project. It serves as the view model for the app-level UI, providing a centralized location to handle common application-wide functionality and events.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void handleLogout()\n  +void handleThemeChange()\n  +void handleLanguageChange()\n}\n\nclass BaseViewModel {\n  +void notifyListeners()\n  +void setBusy(bool value)\n}\n\nAppViewModel -up-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "handleLogout",
          "description": "Handles the user's logout action, performing any necessary cleanup and navigation logic.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "handleThemeChange",
          "description": "Handles a change in the app's theme, updating the UI and persisting the user's preference.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "handleLanguageChange",
          "description": "Handles a change in the app's language, updating the UI and persisting the user's preference.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The `TodoModel` class is responsible for representing a single todo item in the application. It encapsulates the core data and functionality related to a todo, providing a well-defined interface for interacting with and managing todo items.",
      "class_diagram": "@startuml\n  class TodoModel {\n    +String id\n    +String title\n    +String description\n    +bool isCompleted\n    +DateTime createdAt\n    +TodoModel copyWith({String? id, String? title, String? description, bool? isCompleted, DateTime? createdAt})\n  }\n  @enduml",
      "methods": [
        {
          "name": "TodoModel",
          "description": "The constructor for the `TodoModel` class, which allows creating a new todo item with the specified properties. If `createdAt` is not provided, it defaults to the current time.",
          "parameters": [
            "id",
            "title",
            "description",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "copyWith",
          "description": "The `copyWith` method creates a new `TodoModel` instance with the specified changes, allowing you to easily update individual properties of a todo item without creating a new instance from scratch.",
          "parameters": [
            "id",
            "title",
            "description",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "props",
          "description": "The `props` getter returns a list of the model's properties, which is used by the `Equatable` mixin to provide value-based equality comparison for `TodoModel` instances.",
          "parameters": null,
          "return_type": "List<Object>"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the state and operations of todo items in the application. It provides a centralized way to add, toggle, delete, and update todo items, which are represented by the TodoModel class.",
      "class_diagram": "@startuml\n  class TodoService {\n    - _todos: List<TodoModel>\n    + get todos: List<TodoModel>\n    + addTodo(TodoModel todo): void\n    + toggleTodoComplete(String id): void\n    + deleteTodo(String id): void\n    + updateTodo(TodoModel updatedTodo): void\n  }\n  @enduml",
      "methods": [
        {
          "name": "get todos",
          "description": "Returns an unmodifiable list of all the todo items managed by the service",
          "parameters": null,
          "return_type": "List<TodoModel>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new TodoModel instance to the list of todos",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Toggles the completion status of a todo item identified by its ID",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list of todos identified by its ID",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates the properties of an existing todo item identified by its ID",
          "parameters": [
            "TodoModel updatedTodo"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "lib/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_form/todo_form_dialog.dart",
      "description": "This file contains the implementation of the `TodoFormDialog` class, which is responsible for displaying a dialog to create a new Todo item. It provides a user interface for entering a title and description, and handles the submission of the form data.",
      "class_diagram": "@startuml\nclass TodoFormDialog {\n  + final DialogRequest request\n  + final Function(DialogResponse) completer\n  + State<TodoFormDialog> createState()\n}\n\nclass _TodoFormDialogState {\n  - final _formKey = GlobalKey<FormState>()\n  - final _titleController = TextEditingController()\n  - final _descriptionController = TextEditingController()\n  + dispose()\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for the `TodoFormDialog` widget.",
          "parameters": null,
          "return_type": "State<TodoFormDialog>"
        },
        {
          "name": "dispose",
          "description": "Disposes of the `_titleController` and `_descriptionController` when the state object is being destroyed.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Builds the UI for the `TodoFormDialog`, including the form fields for the title and description, and the 'Save' and 'Cancel' buttons.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file contains the `InfoAlertDialog` class, which is responsible for displaying an informative dialog box with a title, description, and a graphic icon. The primary purpose of this class is to provide a reusable and consistent way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nDialog <|-- InfoAlertDialog\nStackedView <|-- InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialog",
          "description": "The constructor for the `InfoAlertDialog` class, which takes in a `DialogRequest` and a `completer` function as parameters. The `DialogRequest` contains the title and description to be displayed in the dialog.",
          "parameters": [
            "DialogRequest request",
            "Function(DialogResponse) completer"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the visual representation of the `InfoAlertDialog`. It takes in the `BuildContext`, the `InfoAlertDialogModel`, and an optional `Widget` child. The method returns a `Widget` that represents the dialog box.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `InfoAlertDialogModel`, which is used to provide any necessary data or functionality to the `builder` method.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_list_item.dart",
      "description": "This Dart file defines a `TodoListItem` widget that represents a single todo item in a list. It is responsible for rendering the visual representation of a todo item and handling user interactions, such as toggling the completion status and deleting the item.",
      "class_diagram": "@startuml\nclass TodoListItem extends StatelessWidget {\n  -TodoModel todo\n  -Function(bool?) onToggleComplete\n  -VoidCallback onDelete\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the `TodoListItem` widget, including the checkbox, title, description, and delete button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing of the Flutter application. It generates the necessary code for handling the navigation between different screens or views within the app, using the Stacked architecture pattern.",
      "class_diagram": "@startuml\n  class Routes {\n    + String homeView\n    + String startupView\n    + Set<String> all\n  }\n  \n  class StackedRouter {\n    + List<RouteDef> routes\n    + Map<Type, StackedRouteFactory> pagesMap\n  }\n  \n  class NavigatorStateExtension {\n    + Future<dynamic> navigateToHomeView()\n    + Future<dynamic> navigateToStartupView()\n    + Future<dynamic> replaceWithHomeView()\n    + Future<dynamic> replaceWithStartupView()\n  }\n  @enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen within the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen within the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen within the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen within the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/features/home/home_view.dart",
        "my_app/features/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of utility functions and constants that help with the layout and styling of Flutter UI components. It serves as a centralized location for common UI-related functionality, improving code reusability and maintainability across the application.",
      "class_diagram": "@startuml\n  class UIHelpers {\n    + const horizontalSpaceTiny: Widget\n    + const horizontalSpaceSmall: Widget\n    + const horizontalSpaceMedium: Widget\n    + const horizontalSpaceLarge: Widget\n    + const verticalSpaceTiny: Widget\n    + const verticalSpaceSmall: Widget\n    + const verticalSpaceMedium: Widget\n    + const verticalSpaceLarge: Widget\n    + const verticalSpaceMassive: Widget\n    + const spacedDivider: Widget\n    + verticalSpace(double height): Widget\n    + screenWidth(BuildContext context): double\n    + screenHeight(BuildContext context): double\n    + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n    + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n    + halfScreenWidth(BuildContext context): double\n    + thirdScreenWidth(BuildContext context): double\n    + quarterScreenWidth(BuildContext context): double\n    + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n    + getResponsiveSmallFontSize(BuildContext context): double\n    + getResponsiveMediumFontSize(BuildContext context): double\n    + getResponsiveLargeFontSize(BuildContext context): double\n    + getResponsiveExtraLargeFontSize(BuildContext context): double\n    + getResponsiveMassiveFontSize(BuildContext context): double\n    + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n  }\n  @enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, optionally offset and capped.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal space sized based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Increment counter\nHomeView -> HomeViewModel: Handle counter increment\nHomeViewModel -> HomeView: Update UI\nUser -> HomeView: Show dialog\nHomeView -> HomeViewModel: Handle show dialog request\nHomeViewModel -> DialogService: Show custom dialog\nUser -> HomeView: Show bottom sheet\nHomeView -> HomeViewModel: Handle show bottom sheet request\nHomeViewModel -> BottomSheetService: Show custom bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. ViewModels, such as HomeViewModel and StartupViewModel, handle the business logic and state for their respective views. The app.locator.dart file sets up the dependency injection, allowing the ViewModels to access services like DialogService and BottomSheetService. The ViewModels update the UI by notifying their listeners when the state changes.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in the app.router.dart file. The main.dart file sets up the app and runs the AppView, which initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. The app.router.dart file provides methods to navigate between the HomeView and StartupView screens, such as navigateToHomeView() and navigateToStartupView()."
}