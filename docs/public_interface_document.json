{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is a todo list management system that allows users to create, view, edit, and delete todo items. It follows the Stacked architecture, utilizing services for state management, routing, and various UI components like dialogs and bottom sheets.",
  "architecture_overview": "The application is structured using the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The app.dart file defines the app structure, including routes, services, bottom sheets, and dialogs. The app is set up and run in the main.dart file.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class in this file is responsible for managing the application-level state and logic in a Flutter app built using the Stacked architecture pattern.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void someMethod()\n}\n@enduml",
      "methods": [
        {
          "name": "AppViewModel",
          "description": "The constructor for the `AppViewModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up the dialog functionality in the Flutter application. It defines the available dialog types and registers the corresponding dialog builders with the DialogService.",
      "class_diagram": "@startuml\n\nclass DialogType {\n  infoAlert\n}\n\nclass InfoAlertDialog {\n  request : DialogRequest\n  completer : DialogCompleter\n}\n\nclass DialogService {\n  registerCustomDialogBuilders(builders : Map<DialogType, DialogBuilder>) : void\n}\n\nDialogType --> InfoAlertDialog : creates\nDialogService <-- DialogType : uses\nDialogService <-- InfoAlertDialog : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers the available dialog builders with the DialogService, enabling the application to display different types of dialogs.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up and configuring the bottom sheet UI for the Flutter application. It defines the different types of bottom sheets that can be displayed and provides a setup function to register the custom bottom sheet builders with the BottomSheetService.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n\n}\n\nenum BottomSheetType {\n\n  notice\n\n}\n\nclass NoticeSheet {\n\n  + NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n\n}\n\nBottomSheetService -left-> BottomSheetType : uses\n\nBottomSheetService -left-> NoticeSheet : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This function sets up the custom bottom sheet builders for the different bottom sheet types. It retrieves the BottomSheetService instance from the service locator and registers the builders for each sheet type.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The TodoViewModel class is responsible for managing the state and behavior of a single todo item in a to-do list application. It provides the core functionality for interacting with the todo item, including toggling its completion status, editing its details, and deleting it.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  - _todoService: TodoService\n  - _dialogService: DialogService\n  - _navigationService: NavigationService\n  - _todo: Todo\n\n  + initialize(Todo todo): void\n  + toggleTodo(): void\n  + editTodo(): Future<void>\n  + deleteTodo(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Sets the initial todo item for the view model and rebuilds the UI.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of the todo item and updates the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "editTodo",
          "description": "Displays a custom dialog to allow the user to edit the details of the todo item, and updates the todo item if the changes are confirmed.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Displays a custom dialog to confirm the deletion of the todo item, and deletes the todo item if the user confirms.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/models/todo.dart",
        "my_app/app/services/todo_service.dart",
        "my_app/enums/dialog_type.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, their corresponding views, and provides a set of navigation methods for navigating between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static final homeView: String\n  +static final startupView: String\n  +static final all: Set<String>\n}\n\nclass StackedRouter {\n  +List<RouteDef> get routes\n  +Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass NavigatorStateExtension {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice sheet UI component in the application. It is a view model that is used to encapsulate the logic related to displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator for the application, which is a key component of the Stacked architecture. The service locator is responsible for providing a global access point for various services and dependencies required by the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the environment to be specified, which can be useful for things like development vs. production environments.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/models/todo.dart",
      "description": "This file defines the `Todo` class, which represents a single task or item in a todo list application. The `Todo` class encapsulates the core data and functionality related to a todo item, providing a standard model for managing and interacting with todo items throughout the application.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +copyWith(...)\n  +toJson()\n  +fromJson(Map<String, dynamic>)\n}\n\nclass Equatable {\n  +get props\n}\n\nTodo ..|> Equatable\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the specified updated properties, allowing individual fields to be modified without creating a new object from scratch.",
          "parameters": [
            "String? id",
            "String? title",
            "String? description",
            "bool? isCompleted",
            "DateTime? createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "toJson",
          "description": "Converts the `Todo` instance to a JSON-serializable map, allowing the todo item to be easily stored or transmitted as a data structure.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Constructs a new `Todo` instance from a JSON-formatted map, allowing todo items to be easily deserialized from a data source.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Todo"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/app/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the application's todo list, providing functionality to add, update, delete, and filter todos, as well as toggle the completion status of individual todos. This service is a critical component of the application's core business logic, enabling users to effectively manage their tasks and track their progress.",
      "class_diagram": "@startuml\nclass TodoService {\n  -List<Todo> _todos\n  +List<Todo> todos\n  +void addTodo(Todo todo)\n  +void updateTodo(Todo todo)\n  +void deleteTodo(String id)\n  +void toggleTodoCompletion(String id)\n  +List<Todo> getFilteredTodos({bool? isCompleted})\n}\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Adds a new Todo item to the list of todos.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing Todo item in the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a Todo item from the list, identified by its unique ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a Todo item, identified by its unique ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "getFilteredTodos",
          "description": "Returns a list of Todo items that match the specified completion status. If no status is provided, it returns the full list of todos.",
          "parameters": [
            "bool? isCompleted"
          ],
          "return_type": "List<Todo>"
        }
      ],
      "dependencies": [
        "package:my_app/app/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines an `InfoAlertDialog` class, which represents a reusable UI component for displaying an informational alert dialog in a Flutter application. The primary purpose of this class is to provide a consistent and visually appealing way to present important information to the user, such as updates, notifications, or instructions.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog({required request, required completer})\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "This method is responsible for building the UI of the `InfoAlertDialog`. It takes the `DialogRequest` object, which contains the title and description to be displayed, and a `completer` function that is called when the user dismisses the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "This method returns an instance of `InfoAlertDialogModel`, which is used to manage the state and behavior of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/enums/bottom_sheet_type.dart",
      "description": "This Dart file defines an enumeration called `BottomSheetType` that represents the different types of bottom sheets that can be displayed in the application.",
      "class_diagram": "@startuml\nenum BottomSheetType {\n    notice\n    floating\n    custom\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/widgets/todo_item.dart",
      "description": "The `TodoItem` widget is responsible for rendering a single todo item in the user interface. It provides a visual representation of a todo item, including its title, description, completion status, and actions for editing or deleting the item.",
      "class_diagram": "@startuml\nclass TodoItem extends StatelessWidget {\n  - Todo todo\n  - VoidCallback onToggle\n  - VoidCallback onEdit\n  - VoidCallback onDelete\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the TodoItem widget, including the checkbox, title, description, and action buttons.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/app/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/delete_todo_dialog.dart",
      "description": "The DeleteTodoDialog class is responsible for displaying a confirmation dialog to the user when they want to delete a todo item. It provides a way to interact with the user and get their confirmation before proceeding with the deletion.",
      "class_diagram": "@startuml\nclass DeleteTodoDialog {\n  +Widget build(BuildContext)\n}\n\nclass DialogRequest {\n  +dynamic data\n}\n\nclass DialogResponse {\n  +bool confirmed\n}\n\nclass Todo {\n  +String title\n}\n\nDeleteTodoDialog --> DialogRequest\nDialogRequest --> Todo\nDialogResponse <-- DeleteTodoDialog\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the delete todo dialog, including the confirmation message and cancel/delete buttons.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/models/todo.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/add_todo_sheet.dart",
      "description": "This file contains a custom widget called `AddTodoSheet` that provides a user interface for adding a new todo item. It is responsible for handling the creation of new todo tasks and interacting with the application's data layer to save the new todo.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  +Function(SheetResponse<Todo>)? completer\n  +SheetRequest request\n  +build(context): Widget\n}\n\nclass AddTodoSheetModel extends BaseViewModel {\n  +titleController: TextEditingController\n  +descriptionController: TextEditingController\n  +isValid: bool\n  +getTodo(): Todo\n  +dispose()\n}\n\nAddTodoSheet --> AddTodoSheetModel\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `AddTodoSheet` widget, including text fields for the todo title and description, and buttons to add the todo or cancel the operation.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "isValid",
          "description": "Checks if the todo title and description fields have been filled out, determining if the todo can be saved.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "getTodo",
          "description": "Creates a new `Todo` object with the values from the title and description text fields, and the current timestamp as the creation date.",
          "parameters": null,
          "return_type": "Todo"
        },
        {
          "name": "dispose",
          "description": "Disposes of the text editing controllers used in the `AddTodoSheetModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/models/todo.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/enums/dialog_type.dart",
      "description": "This file defines an enum called `DialogType` that represents the different types of dialogs that can be displayed in the application.",
      "class_diagram": "@startuml\n  enum DialogType {\n    custom,\n    info,\n    error,\n    warning,\n  }\n  @enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "N/A",
          "description": "The `InfoAlertDialogModel` class does not define any public methods. It extends the `BaseViewModel` class from the `stacked` package, which provides a basic implementation of the ViewModel pattern.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/edit_todo_dialog.dart",
      "description": "The EditTodoDialog file is responsible for providing a dialog interface that allows users to edit the title and description of a Todo item. It is a key component in the application's todo management functionality.",
      "class_diagram": "@startuml\nclass EditTodoDialog {\n  +Widget build(context, model, child)\n}\n\nclass EditTodoDialogModel {\n  -Todo originalTodo\n  +TextEditingController titleController\n  +TextEditingController descriptionController\n  +bool get isValid()\n  +Todo getUpdatedTodo()\n  +void dispose()\n}\n\nEditTodoDialog --> EditTodoDialogModel\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the EditTodoDialog widget, which displays a dialog with input fields for editing the title and description of a Todo item.",
          "parameters": [
            "context",
            "model",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "getUpdatedTodo",
          "description": "Retrieves the updated Todo item with the new title and description entered by the user.",
          "parameters": null,
          "return_type": "Todo"
        },
        {
          "name": "dispose",
          "description": "Cleans up the resources used by the EditTodoDialogModel, such as the TextEditingControllers.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/models/todo.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This Dart file defines the `NoticeSheet` class, which is responsible for rendering a bottom sheet UI component that displays a notice or alert message to the user. The main purpose of this file is to provide a reusable and customizable way to present important information or notifications to the user within the application's UI.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request, key})\n  +Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  +NoticeSheetModel viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "This method is responsible for building the UI of the `NoticeSheet` widget. It takes the current `BuildContext`, the `NoticeSheetModel` view model, and an optional child widget as parameters, and returns a `Widget` that represents the bottom sheet's content.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "This method is responsible for creating and returning an instance of the `NoticeSheetModel` class, which serves as the view model for the `NoticeSheet` widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of reusable UI helper functions and constants that help with the layout and responsiveness of Flutter UI components. It serves as a centralized location for managing common UI-related utility functions and constants used throughout the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const double _tinySize\n  + static const double _smallSize\n  + static const double _mediumSize\n  + static const double _largeSize\n  + static const double _massiveSize\n  + static const Widget horizontalSpaceTiny\n  + static const Widget horizontalSpaceSmall\n  + static const Widget horizontalSpaceMedium\n  + static const Widget horizontalSpaceLarge\n  + static const Widget verticalSpaceTiny\n  + static const Widget verticalSpaceSmall\n  + static const Widget verticalSpaceMedium\n  + static const Widget verticalSpaceLarge\n  + static const Widget verticalSpaceMassive\n  + static Widget spacedDivider\n  + static Widget verticalSpace(double height)\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n  + static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "verticalSpace",
          "description": "Creates a vertical space with the given height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, with optional offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width, with optional offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal space medium value.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized and consistent way to manage and apply the application's color palette.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "The `TodoView` class is responsible for displaying the details of a selected todo item. It provides a user interface for viewing the todo's title, description, and allowing the user to toggle its completion status, edit the todo, or delete it.",
      "class_diagram": "@startuml\nclass TodoView {\n  +Widget builder(BuildContext, TodoViewModel, Widget?)\n  +TodoViewModel viewModelBuilder(BuildContext)\n}\n\nclass TodoViewModel {\n  +Todo? todo\n  +void toggleTodo()\n  +void editTodo()\n  +void deleteTodo()\n}\n\nclass TodoItem {\n  +Todo todo\n  +void Function() onToggle\n  +void Function() onEdit\n  +void Function() onDelete\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `TodoView` based on the data provided by the `TodoViewModel`.",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `TodoViewModel` to be used by the `TodoView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/todo/todo_viewmodel.dart",
        "package:my_app/ui/widgets/todo_item.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoView\nparticipant TodoViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Add new todo\nHomeView -> HomeViewModel: Create new todo\nHomeViewModel -> TodoView: Navigate to todo details\nTodoView -> TodoViewModel: Initialize with todo\nUser -> TodoView: Toggle todo completion\nTodoView -> TodoViewModel: Toggle todo\nUser -> TodoView: Edit todo\nTodoView -> TodoViewModel: Edit todo\nUser -> TodoView: Delete todo\nTodoView -> TodoViewModel: Delete todo\nHomeView <- HomeViewModel: Update todo list\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view (e.g., HomeView, TodoView) has a corresponding ViewModel (HomeViewModel, TodoViewModel) that handles the business logic and state for that view. The ViewModels interact with services like TodoService to manage the todo items. State changes in the ViewModels are then reflected in the UI through the Stacked framework.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in the app.router.dart file. The router defines the available routes (HomeView, StartupView, TodoView) and provides navigation methods that can be called from the ViewModels to transition between views. The AppView initializes the Stacked architecture and displays the StartupView, which then navigates to the HomeView. From the HomeView, the user can navigate to the TodoView to manage individual todo items."
}