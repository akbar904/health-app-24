{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is a todo list management app that follows the Stacked architecture. It allows users to create, view, update, and delete todo items. The app features a home screen that displays the todo list, a bottom sheet for adding new todos, and a dialog for confirming the deletion of todo items.",
  "architecture_overview": "The application uses the Stacked architecture, which separates concerns into different layers, including the View, ViewModel, and Service layers. The Stacked architecture provides a structured approach to state management, routing, and dependency injection. The project structure follows this pattern, with separate folders for features, UI components, and utilities.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing the dialog system in the Flutter application. It provides a centralized way to register and handle different types of dialogs, ensuring a consistent user experience across the app.",
      "class_diagram": "@startuml\nclass DialogService {\n  +registerCustomDialogBuilders(builders: Map<DialogType, DialogBuilder>)\n}\n\nclass DialogType {\n  +infoAlert\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(request: DialogRequest, completer: DialogCompleter)\n}\n\nDialogService <-- DialogType\nDialogService <-- InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the dialog service by registering custom dialog builders for each dialog type. It allows the application to display different types of dialogs, such as the InfoAlertDialog, in a consistent and centralized manner.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application in a Flutter app built using the MVVM (Model-View-ViewModel) architecture pattern. It serves as the ViewModel component, providing a bridge between the UI layer (the View) and the underlying business logic and data (the Model).",
      "class_diagram": "@startuml\n  class AppViewModel extends BaseViewModel {\n    # _someVariable: Type\n    + method1(param1: Type): ReturnType\n    + method2(): void\n  }\n  @enduml",
      "methods": [
        {
          "name": "method1",
          "description": "Performs some core functionality of the application, potentially accessing and manipulating data from the Model layer.",
          "parameters": [
            "param1: Type"
          ],
          "return_type": "ReturnType"
        },
        {
          "name": "method2",
          "description": "Executes an action or updates the state of the application, notifying the View layer of the changes.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI in the application. It defines the available bottom sheet types and provides a method to register the custom bottom sheet builders with the BottomSheetService.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass NoticeSheet {\n  NoticeSheet(request, completer)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nBottomSheetService --> BottomSheetType : uses\nBottomSheetService --> NoticeSheet : creates\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Registers the custom bottom sheet builders with the BottomSheetService.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "The `ui_helpers.dart` file provides a set of utility functions and constants to help with the layout and styling of Flutter UI components. It contains various pre-defined spacing and font size values, as well as helper functions to easily calculate responsive sizing based on the device's screen dimensions.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A pre-defined horizontal spacing widget with a width of 5 units.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the current screen width in logical pixels.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the current screen height based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Calculates a responsive small font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the current screen width and the provided parameters.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, their corresponding view classes, and provides navigation-related functionality.",
      "class_diagram": "@startuml\nclass Routes {\n  + static const homeView: String\n  + static const startupView: String\n  + static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  - _routes: List<RouteDef>\n  - _pagesMap: Map<Type, StackedRouteFactory>\n  + routes: List<RouteDef>\n  + pagesMap: Map<Type, StackedRouteFactory>\n}\n\nclass NavigatorStateExtension on NavigationService {\n  + navigateToHomeView(): Future<dynamic>\n  + navigateToStartupView(): Future<dynamic>\n  + replaceWithHomeView(): Future<dynamic>\n  + replaceWithStartupView(): Future<dynamic>\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class provides a UI component for adding new todo items within a bottom sheet. It allows users to enter a description for the new todo and saves it when the 'Add' button is pressed.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the add todo bottom sheet, including a text field for the todo description and buttons to cancel or add the new todo.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/todo_item.dart",
      "description": "The `TodoItem` widget is responsible for rendering a single todo item in the user interface. It provides the core functionality for displaying a todo task, allowing the user to toggle its completion status, and deleting the todo item.",
      "class_diagram": "@startuml\nclass TodoItem extends StatelessWidget {\n  + final Todo todo\n  + final VoidCallback onToggle\n  + final VoidCallback onDelete\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the todo item, including a checkbox, the todo description, and a delete button.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/features/todos/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -u-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/confirm_delete/confirm_delete_dialog.dart",
      "description": "This file contains the `ConfirmDeleteDialog` class, which is responsible for displaying a confirmation dialog to the user when they attempt to delete a todo item. It provides a visual interface for the user to confirm or cancel the deletion action.",
      "class_diagram": "@startuml\nclass ConfirmDeleteDialog {\n  +DialogRequest request\n  +Function(DialogResponse) completer\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the confirmation dialog, including the title, description, and buttons for confirming or canceling the deletion.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location to manage and access the application's color palette, ensuring consistency and maintainability across the codebase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection and service locator for the Flutter application. It is a generated file that is part of the stacked architecture pattern.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is used to register the various services and dependencies that are required by the application. It sets up the StackedLocator instance and registers the BottomSheetService, DialogService, and NavigationService as singletons.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for rendering a bottom sheet UI component that displays a notice or alert to the user. It is part of the user interface (UI) layer of the application and is used to present important information or updates to the user in a modal dialog format.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required this.completer, required this.request, super.key})\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  +NoticeSheetModel viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `NoticeSheet` based on the provided `NoticeSheetModel` and `SheetRequest` data.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `NoticeSheetModel` view model, which encapsulates the data and logic associated with the notice sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the state and operations of a todo list application. It provides the core functionality for creating, retrieving, updating, and deleting todo items.",
      "class_diagram": "@startuml\nclass TodoService {\n  -List<Todo> _todos\n  +Future<List<Todo>> getTodos()\n  +Future<void> addTodo(String description)\n  +Future<void> toggleTodo(Todo todo)\n  +Future<void> deleteTodo(Todo todo)\n}\n\nclass Todo {\n  +String id\n  +String description\n  +DateTime createdAt\n  +bool isCompleted\n  +Todo copyWith({bool isCompleted})\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of all todo items",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list",
          "parameters": [
            "String description"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of a todo item",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/features/todos/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines a view model class responsible for managing the state and behavior of a notice bottom sheet UI component within a Flutter application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/todos/todo_model.dart",
      "description": "The `Todo` class in this file represents an individual task or item in a todo list. It encapsulates the essential data and functionality for managing and manipulating todo items within the application.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +Todo copyWith(...)\n}\n@enduml",
      "methods": [
        {
          "name": "Todo",
          "description": "Constructor for creating a new `Todo` instance. Required parameters are `id`, `description`, and `createdAt`. The `isCompleted` parameter is optional and defaults to `false`.",
          "parameters": [
            "id",
            "description",
            "isCompleted",
            "createdAt"
          ],
          "return_type": null
        },
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the specified changes. Allows you to update individual properties of a `Todo` object without modifying the entire object.",
          "parameters": [
            "id",
            "description",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "props",
          "description": "Returns a list of the properties that define the identity of the `Todo` object. This is used by the `Equatable` mixin to compare `Todo` instances for equality.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines the `InfoAlertDialog` class, which is responsible for displaying an informative alert dialog in the application. The dialog is used to provide users with important information or updates, such as system notifications or updates to the app's features.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, InfoAlertDialogModel, Widget?)\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog --o InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `InfoAlertDialog` widget, displaying the title, description, and a graphic icon. It also includes a 'Got it' button that the user can tap to acknowledge the alert and close the dialog.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `InfoAlertDialogModel` class, which is used to manage the state and behavior of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Fetch initial todos\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact (add, toggle, delete todo)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoService: Perform CRUD operations\nHomeViewModel -> DialogService: Show delete confirmation dialog\nHomeViewModel -> BottomSheetService: Show add todo bottom sheet\nTodoService -> HomeViewModel: Update todo list\nHomeViewModel -> HomeView: Update UI\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture's ViewModel pattern for state management. Each view (e.g., HomeView) has a corresponding ViewModel (e.g., HomeViewModel) that handles the business logic and state changes. The ViewModels interact with the TodoService, which manages the todo items' data. The ViewModel classes extend the BaseViewModel class provided by the Stacked package, which handles state change notifications and reactive updates to the UI.",
  "navigation_flow": "Navigation within the application is managed using the Stacked Router, which is defined in the app.router.dart file. The main routes in the application are the StartupView and HomeView. The Stacked Router provides methods to navigate between these views, such as navigateToHomeView() and replaceWithStartupView(). The navigation logic is encapsulated in the NavigatorStateExtension class, which is accessible throughout the application."
}