{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter project is a Todo List application that allows users to manage their tasks. It features various functionalities such as creating, editing, deleting, and filtering todo items. The application also includes a startup screen, a home screen, and the ability to display custom dialogs and bottom sheets.",
  "architecture_overview": "The application follows the Stacked architecture, which promotes the Model-View-ViewModel (MVVM) pattern. It utilizes the Stacked package for state management, routing, and dependency injection. The codebase is organized into separate folders for features, UI components, and utilities, allowing for modular and scalable development.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/enums/bottom_sheet_type.dart",
      "description": "This Dart file defines an enum called `BottomSheetType` which represents the different types of bottom sheets that can be displayed in the application.",
      "class_diagram": "@startuml\n\nenum BottomSheetType {\n  custom\n  notice\n  filter\n}\n\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and registering custom dialog builders for the application. It provides a centralized location to manage the different types of dialogs used throughout the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers the available dialog builders with the DialogService, allowing them to be used throughout the application.",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI for the application. It defines the different types of bottom sheets that can be displayed and provides a central location for registering the custom bottom sheet builders.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  +notice\n}\n\nclass NoticeSheet {\n  +NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Registers the custom bottom sheet builders with the BottomSheetService. This allows the application to display different types of bottom sheets when requested.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up the dependency injection and service locator for the Flutter application. It is a crucial part of the application's architecture, as it manages the registration and resolution of dependencies across the codebase.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary dependencies and services with the Stacked locator. It allows the application to access these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialogModel -up-|> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "The TodoView class is responsible for rendering the user interface of the Todo List feature. It displays the list of todos, provides functionality to add, edit, and delete todos, and allows users to filter the list based on various criteria.",
      "class_diagram": "@startuml\nclass TodoView {\n  + builder(BuildContext, TodoViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): TodoViewModel\n}\n\nclass TodoViewModel {\n  + todos: List<Todo>\n  + toggleTodoStatus(String): void\n  + deleteTodo(String): void\n  + showEditDialog(Todo): void\n  + showAddDialog(): void\n  + showFilterSheet(): void\n}\n\nclass Todo {\n  + id: String\n  + title: String\n  + completed: bool\n}\n\nTodoView *-- TodoViewModel\nTodoViewModel *-- Todo\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the TodoView based on the state of the TodoViewModel.",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the TodoViewModel to be used by the TodoView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/todo/todo_viewmodel.dart",
        "package:my_app/features/todo/widgets/todo_list_item.dart",
        "package:my_app/features/todo/widgets/add_todo_form.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_delete/todo_delete_dialog.dart",
      "description": "This file defines the TodoDeleteDialog class, which is responsible for displaying a confirmation dialog to the user when they want to delete a todo item. This dialog is used to ensure that the user intends to delete the todo, preventing accidental deletions.",
      "class_diagram": "@startuml\nclass TodoDeleteDialog {\n  +Widget build(BuildContext context)\n  -Function(DialogResponse) completer\n  -DialogRequest request\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI of the TodoDeleteDialog, including the title, description, and buttons to confirm or cancel the deletion.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/validators.dart",
      "description": "This file provides a set of utility functions for validating user input related to todo items. It defines validation rules for the title and description of a todo item, ensuring that they meet certain criteria to maintain data integrity and provide a good user experience.",
      "class_diagram": "@startuml\nclass Validators {\n  + static String? validateTodoTitle(String? value)\n  + static String? validateTodoDescription(String? value)\n}\n@enduml",
      "methods": [
        {
          "name": "validateTodoTitle",
          "description": "Validates the title of a todo item, ensuring that it is not empty, is at least 3 characters long, and does not exceed 50 characters.",
          "parameters": [
            "String? value"
          ],
          "return_type": "String?"
        },
        {
          "name": "validateTodoDescription",
          "description": "Validates the description of a todo item, ensuring that it is not empty and does not exceed 500 characters.",
          "parameters": [
            "String? value"
          ],
          "return_type": "String?"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/features/todo/widgets/add_todo_form.dart",
      "description": "The AddTodoForm class is a Flutter widget responsible for providing a user interface for creating or editing a todo item. It allows the user to input a title and description for the todo, and submits the form data to a provided callback function.",
      "class_diagram": "@startuml\nclass AddTodoForm extends StatefulWidget {\n  final String? initialTitle\n  final String? initialDescription\n  final bool isEditing\n  final Function(String, String) onSubmit\n}\n\nclass _AddTodoFormState extends State<AddTodoForm> {\n  late TextEditingController _titleController\n  late TextEditingController _descriptionController\n\n  + build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the AddTodoForm widget, including text input fields for the title and description, and a submit button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/todo_filter/todo_filter_sheet.dart",
      "description": "The TodoFilterSheet class is responsible for providing a bottom sheet UI component that allows users to filter their to-do list based on completion status and search query. This component is essential for helping users efficiently manage and organize their tasks within the application.",
      "class_diagram": "@startuml\nclass TodoFilterSheet {\n  +final SheetRequest request\n  +final Function(SheetResponse) completer\n  +State<TodoFilterSheet> createState()\n}\n\nclass _TodoFilterSheetState extends State<TodoFilterSheet> {\n  -late bool? _isCompleted\n  -late String _searchQuery\n  +initState()\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for this widget.",
          "parameters": null,
          "return_type": "State<TodoFilterSheet>"
        },
        {
          "name": "initState",
          "description": "Initializes the state of the TodoFilterSheet, setting the initial values for _isCompleted and _searchQuery based on the data provided in the SheetRequest.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the UI for the TodoFilterSheet, including a search input field, a dropdown for selecting the completion status, and Cancel/Apply buttons to interact with the filter options.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the todo items in the application. It provides the core functionality for creating, reading, updating, and deleting todo items, as well as filtering and toggling the completion status of the todos.",
      "class_diagram": "@startuml\nclass TodoService {\n  - _todos: List<TodoModel>\n  + getTodos(): List<TodoModel>\n  + addTodo(TodoModel todo): void\n  + updateTodo(TodoModel todo): void\n  + deleteTodo(String id): void\n  + toggleTodoStatus(String id): void\n  + filterTodos(isCompleted: bool, searchQuery: String): List<TodoModel>\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Returns an unmodifiable list of all the todo items.",
          "parameters": null,
          "return_type": "List<TodoModel>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new TodoModel instance to the list of todos.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing TodoModel instance in the list of todos.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a TodoModel instance from the list of todos based on its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Toggles the completion status of a TodoModel instance in the list of todos.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "filterTodos",
          "description": "Filters the list of todos based on the specified completion status and search query.",
          "parameters": [
            "bool? isCompleted",
            "String? searchQuery"
          ],
          "return_type": "List<TodoModel>"
        }
      ],
      "dependencies": [
        "my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for Todo items in the application. It acts as an intermediary between the UI layer and the underlying TodoService, providing a standardized interface for interacting with Todo data.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  + getTodos(): List<TodoModel>\n  + addTodo(TodoModel todo): void\n  + updateTodo(TodoModel todo): void\n  + deleteTodo(String id): void\n  + toggleTodoStatus(String id): void\n  + filterTodos({bool? isCompleted, String? searchQuery}): List<TodoModel>\n}\n\nTodoRepository o-- TodoService\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of all Todo items from the TodoService.",
          "parameters": [],
          "return_type": "List<TodoModel>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new Todo item to the TodoService.",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing Todo item in the TodoService.",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Deletes a Todo item from the TodoService.",
          "parameters": [
            "String"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Changes the completion status of a Todo item in the TodoService.",
          "parameters": [
            "String"
          ],
          "return_type": "void"
        },
        {
          "name": "filterTodos",
          "description": "Retrieves a filtered list of Todo items from the TodoService based on completion status and/or search query.",
          "parameters": [
            "bool?",
            "String?"
          ],
          "return_type": "List<TodoModel>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/models/todo_model.dart",
        "my_app/services/todo_service.dart"
      ]
    },
    {
      "name": "lib/enums/dialog_type.dart",
      "description": "This Dart file defines an enum called `DialogType` that represents different types of dialogs or modals used in the application. It provides a standardized way to categorize and work with various dialog scenarios.",
      "class_diagram": "@startuml\nenum DialogType {\n  custom\n  basic\n  form\n  infoAlert\n  confirmation\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file, `ui_helpers.dart`, is responsible for providing a set of reusable UI components and utility functions that help with the layout and styling of the application's user interface. It serves as a central place for managing common UI-related tasks, ensuring consistency and reducing code duplication across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const Widget horizontalSpaceTiny\n  + static const Widget horizontalSpaceSmall\n  + static const Widget horizontalSpaceMedium\n  + static const Widget horizontalSpaceLarge\n  + static const Widget verticalSpaceTiny\n  + static const Widget verticalSpaceSmall\n  + static const Widget verticalSpaceMedium\n  + static const Widget verticalSpaceLarge\n  + static const Widget verticalSpaceMassive\n  + static Widget spacedDivider\n  + static Widget verticalSpace(double height)\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n  + static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Retrieves the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Retrieves the height of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the screen height, optionally with an offset and a maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file contains the `NoticeSheetModel` class, which is responsible for managing the state and behavior of the notice bottom sheet UI component in the application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is a ViewModel component in a Flutter application that provides a base implementation for managing the application's state and lifecycle. It is designed to work with the `stacked` package, a state management library that promotes the Model-View-ViewModel (MVVM) architectural pattern.",
      "class_diagram": "@startuml\nclass AppViewModel implements BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_list_item.dart",
      "description": "This Dart file defines a `TodoListItem` widget responsible for rendering a single todo item in a todo list. The widget displays the todo's title, description, creation and completion dates, and provides actions to toggle the todo's completion status, edit the todo, and delete the todo.",
      "class_diagram": "@startuml\nclass TodoListItem {\n  -TodoModel todo\n  -VoidCallback onToggle\n  -VoidCallback onDelete\n  -VoidCallback onEdit\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the TodoListItem widget, including the todo's title, description, creation and completion dates, and action buttons.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/todo_model.dart",
        "package:intl/intl.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The TodoViewModel class is responsible for managing the state and business logic of a Todo application. It serves as the ViewModel in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic and data management.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  - _todoRepository: TodoRepository\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _todos: List<TodoModel>\n  - _filterCompleted: bool?\n  - _searchQuery: String\n\n  + initialize(): void\n  + showAddDialog(): Future<void>\n  + showEditDialog(TodoModel todo): Future<void>\n  + deleteTodo(String id): Future<void>\n  + toggleTodoStatus(String id): void\n  + showFilterSheet(): Future<void>\n}\n\nTodoViewModel --> TodoRepository\nTodoViewModel --> DialogService\nTodoViewModel --> BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the ViewModel by loading the todo items from the TodoRepository.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showAddDialog",
          "description": "Displays a custom dialog to allow the user to add a new todo item. It creates a new TodoModel and adds it to the TodoRepository.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "showEditDialog",
          "description": "Displays a custom dialog to allow the user to edit an existing todo item. It updates the TodoModel in the TodoRepository.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Displays a confirmation dialog and deletes the specified todo item from the TodoRepository.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Toggles the completion status of the specified todo item in the TodoRepository.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "showFilterSheet",
          "description": "Displays a custom bottom sheet to allow the user to filter the todo items based on completion status and search query. It updates the filter criteria and reloads the todo items.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/app/app.locator.dart",
        "my_app/features/todo/todo_repository.dart",
        "my_app/models/todo_model.dart",
        "my_app/enums/dialog_type.dart",
        "my_app/enums/bottom_sheet_type.dart",
        "my_app/features/todo/widgets/add_todo_form.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing in the Flutter application. It is generated using the `StackedNavigatorGenerator` from the `stacked` package, which is a popular state management and navigation library for Flutter.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  +routes: List<RouteDef>\n  +pagesMap: Map<Type, StackedRouteFactory>\n  +navigateToHomeView()\n  +navigateToStartupView()\n  +replaceWithHomeView()\n  +replaceWithStartupView()\n}\n\nclass Routes {\n  +homeView: String\n  +startupView: String\n  +all: Set<String>\n}\n\nStackedRouter *-- Routes\nclass NavigationService {\n  +navigateTo()\n  +replaceWith()\n}\n\nStackedRouter ..> NavigationService\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen of the application.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/features/home/home_view.dart",
        "my_app/features/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The TodoModel class is responsible for representing and managing the data for a single todo item in a todo list application. It encapsulates the core properties of a todo, including its unique identifier, title, description, completion status, creation date, and optional completion date.",
      "class_diagram": "@startuml\nclass TodoModel {\n  +String id\n  +String title\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +DateTime? completedAt\n  +TodoModel copyWith()\n  +Map<String, dynamic> toMap()\n  +factory TodoModel.fromMap()\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new TodoModel instance with the specified property values, allowing individual fields to be updated without modifying the entire object.",
          "parameters": [
            "String? id",
            "String? title",
            "String? description",
            "bool? isCompleted",
            "DateTime? createdAt",
            "DateTime? completedAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "toMap",
          "description": "Converts the TodoModel instance to a Map<String, dynamic> representation, which can be used for serialization or storage purposes.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromMap",
          "description": "Constructs a TodoModel instance from a Map<String, dynamic> representation, which can be used for deserialization or loading data.",
          "parameters": [
            "Map<String, dynamic> map"
          ],
          "return_type": "TodoModel"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This Dart file defines the `NoticeSheet` class, which is responsible for displaying a bottom sheet with a notice or alert message to the user. The primary purpose of this class is to provide a reusable UI component for displaying important information or notifications within the application.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +completer: Function(SheetResponse)?\n  +request: SheetRequest\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet --> NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `NoticeSheet` widget, which includes the title, description, and any other necessary UI elements.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `NoticeSheetModel` class, which is responsible for handling the business logic and data related to the notice sheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location to manage the application's color palette, ensuring consistent branding and theming across the UI.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file contains the implementation of an InfoAlertDialog, which is a custom dialog that displays an informational message to the user. It is responsible for rendering the dialog UI, handling user interactions, and communicating the dialog response back to the calling component.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +DialogRequest request\n  +Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog -up-> InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes in the dialog request, the view model, and an optional child widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides the instance of the InfoAlertDialogModel to be used by the StackedView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoView\nparticipant TodoViewModel\nparticipant TodoRepository\nparticipant TodoService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Navigate to Todo List\nHomeView -> TodoView: Display todo items\nTodoView -> TodoViewModel: Initialize\nTodoViewModel -> TodoRepository: Get todos\nTodoRepository -> TodoService: Retrieve todos\nTodoService -> TodoViewModel: Return todos\nTodoViewModel -> TodoView: Update UI\nUser -> TodoView: Interact (add, edit, delete, filter)\nTodoView -> TodoViewModel: Handle user actions\nTodoViewModel -> TodoRepository: Perform CRUD operations\nTodoRepository -> TodoService: Update todo data\nTodoViewModel -> DialogService: Show dialogs\nTodoViewModel -> BottomSheetService: Show bottom sheets\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view (e.g., HomeView, TodoView) has a corresponding ViewModel (e.g., HomeViewModel, TodoViewModel) that manages the state and business logic for that view. The ViewModels interact with services and repositories to handle data operations and update the UI accordingly. The Stacked package's reactive bindings are used to propagate state changes from the ViewModels to the Views.",
  "navigation_flow": "The application's navigation is handled using the Stacked Router, which is generated from the app.router.dart file. The main entry point, main.dart, sets up the Stacked App and initializes the navigation. The AppView is the root widget that displays the StartupView, which then navigates to the HomeView. From the HomeView, the user can navigate to the TodoView. The navigation between views is managed by the Stacked Router, which provides methods like navigateTo and replaceWith to handle screen transitions."
}