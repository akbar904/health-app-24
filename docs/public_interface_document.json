{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is a todo list management app that follows the Stacked architecture. It allows users to create, update, and delete todo items, as well as filter the list to view completed or active tasks. The app also includes custom dialog and bottom sheet UI components for displaying additional information and taking user actions.",
  "architecture_overview": "The application is structured using the Stacked architecture, which separates the concerns of the presentation, business logic, and data layers. The main components include:\n\n- ViewModels (e.g., HomeViewModel, StartupViewModel) that handle the state and business logic for their respective views.\n- Views (e.g., HomeView, StartupView) that are responsible for rendering the UI.\n- Services (e.g., TodoService, DialogService, BottomSheetService) that encapsulate domain-specific functionality and state.\n- Utility classes (e.g., TodoListItem, UIHelpers) that provide reusable UI components and helper functions.\n\nThe app uses dependency injection (managed by the `stacked_services` package) to wire up the various components and services, ensuring loose coupling and testability.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the custom dialog UI in the application. It provides a centralized location for registering dialog builders and handling the lifecycle of different types of dialogs.",
      "class_diagram": "@startuml\n\npackage 'stacked_services' {\n    class DialogService\n}\n\npackage 'app.dialogs' {\n    enum DialogType {\n        infoAlert\n    }\n    \n    class InfoAlertDialog\n    \n    void setupDialogUi()\n}\n\nDialogService <-- 'app.dialogs': Depends on\nInfoAlertDialog <-- 'app.dialogs': Implements\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers custom dialog builders with the DialogService, allowing the application to display various types of dialogs.",
          "parameters": [
            ""
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "../ui/dialogs/info_alert/info_alert_dialog.dart",
        "app.locator.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet functionality in the Flutter application. It defines the types of bottom sheets that can be displayed and provides a centralized way to register and configure the custom bottom sheet builders.",
      "class_diagram": "@startuml\n\nclass BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  request : SheetRequest\n  completer : SheetCompleter\n}\n\nclass BottomSheetService {\n  setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nBottomSheetType --> NoticeSheet : builds\nBottomSheetService --> BottomSheetType : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the bottom sheet service with custom builders for the defined bottom sheet types.",
          "parameters": [
            "bottomsheetService : BottomSheetService"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked_services/stacked_services.dart",
        "app.locator.dart",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines the `InfoAlertDialog` widget, which is responsible for displaying an informational alert dialog in the application. The dialog presents a message with a title, description, and a graphical icon, along with a 'Got it' button to dismiss the dialog.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialog",
          "description": "Constructs the `InfoAlertDialog` widget with the provided `DialogRequest` and `completer` callback.",
          "parameters": [
            "request",
            "completer"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "Builds the UI for the `InfoAlertDialog` widget, including the title, description, graphical icon, and the 'Got it' button.",
          "parameters": [
            "context",
            "viewModel",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `InfoAlertDialogModel` to the `StackedView` widget.",
          "parameters": [
            "context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, creates the necessary `MaterialPageRoute` instances for each view, and provides extension methods on the `NavigationService` to simplify navigation between the different views.",
      "class_diagram": "@startuml\nclass Routes {\n  + static const homeView: String\n  + static const startupView: String\n  + static const all: Set<String>\n}\n\nclass StackedRouter {\n  + List<RouteDef> get routes()\n  + Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension {\n  + Future<dynamic> navigateToHomeView()\n  + Future<dynamic> navigateToStartupView()\n  + Future<dynamic> replaceWithHomeView()\n  + Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is a base view model that provides a foundation for the application's view models. It is responsible for managing the core state and functionality that is shared across multiple screens and features of the application.",
      "class_diagram": "@startuml\nclass AppViewModel implements BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_filter_bar.dart",
      "description": "The `TodoFilterBar` class is responsible for providing a user interface component that allows the user to filter the displayed todo items based on their completion status. It serves as a part of the overall home screen functionality in a todo list application.",
      "class_diagram": "@startuml\nclass TodoFilterBar {\n  -bool showCompleted\n  -ValueChanged<bool> onFilterChanged\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the todo filter bar, including a label that displays the current filter status and a switch that allows the user to toggle between showing completed or active tasks.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This file defines the `Todo` class, which represents a single task or item in a to-do list. The `Todo` class encapsulates the core data and state associated with a to-do item, providing a centralized model for managing and manipulating to-do items throughout the application.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +DateTime? completedAt\n  +Todo copyWith(...)\n}\n\nTodo *-- DateTime : createdAt\nTodo *-- DateTime : completedAt\n@enduml",
      "methods": [
        {
          "name": "Todo",
          "description": "The constructor for the `Todo` class, which takes in the required fields (id, title, description, createdAt) and optional fields (isCompleted, completedAt).",
          "parameters": [
            "id",
            "title",
            "description",
            "isCompleted",
            "createdAt",
            "completedAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "copyWith",
          "description": "A method that creates a new `Todo` instance with the specified changes, allowing for easy updating and modification of to-do items.",
          "parameters": [
            "id",
            "title",
            "description",
            "isCompleted",
            "createdAt",
            "completedAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "props",
          "description": "A getter that returns a list of all the properties of the `Todo` class, used for equality comparisons.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_detail/todo_detail_dialog.dart",
      "description": "This file provides a custom dialog widget that displays the details of a Todo item. It is responsible for rendering the Todo's title, description, creation and completion dates, and providing a button to close the dialog.",
      "class_diagram": "@startuml\nclass TodoDetailDialog {\n  + TodoDetailDialog(request: DialogRequest, completer: Function(DialogResponse))\n  + build(context: BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "TodoDetailDialog",
          "description": "Constructs a TodoDetailDialog with the provided DialogRequest and completer function.",
          "parameters": [
            "request: DialogRequest",
            "completer: Function(DialogResponse)"
          ],
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds and returns the UI for the TodoDetailDialog, displaying the Todo's information and a close button.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/todo.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the state and operations of a todo list application. It provides the core functionality for creating, updating, deleting, and filtering todos, as well as toggling their completion status.",
      "class_diagram": "@startuml\nclass TodoService {\n  - List<Todo> _todos\n  + List<Todo> getTodos()\n  + void addTodo(Todo todo)\n  + void updateTodo(Todo todo)\n  + void deleteTodo(String id)\n  + void toggleTodoCompletion(String id)\n  + List<Todo> filterTodos({required bool showCompleted})\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Returns an unmodifiable list of all the todos.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo to the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo in the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo from the list by its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo and updates its completion date.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "filterTodos",
          "description": "Returns a list of todos filtered by their completion status.",
          "parameters": [
            "required bool showCompleted"
          ],
          "return_type": "List<Todo>"
        }
      ],
      "dependencies": [
        "package:my_app/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is responsible for managing the state and behavior of a notice sheet UI component within a Flutter application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The AddTodoSheet class is responsible for providing a bottom sheet UI component that allows users to create a new todo item. It serves as the primary interface for adding new todos to the application.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the AddTodoSheet, including text input fields for title and description, and buttons for adding or cancelling the todo item.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of consistent color constants used throughout the application's UI. It provides a centralized location to manage and apply the primary brand colors, as well as various shades of grey for theming and styling the app's visual elements.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection (DI) system for the application using the `stacked` package. It is a generated file that is automatically created by the `stacked_generator` package, which is a tool that generates boilerplate code to simplify the setup and usage of the `stacked` architecture.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the various services and dependencies that the application requires. It does this by using the `StackedLocator` instance to register the `BottomSheetService`, `DialogService`, and `NavigationService` as lazily instantiated singletons.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_list_item.dart",
      "description": "This Dart file defines a `TodoListItem` widget, which is responsible for rendering a single item in a todo list. It provides a visual representation of a todo item, including its title, description, and completion status, and allows the user to interact with the todo item by toggling its completion status, tapping on it, or deleting it.",
      "class_diagram": "@startuml\nclass TodoListItem {\n  +Todo todo\n  +VoidCallback onToggle\n  +VoidCallback onTap\n  +VoidCallback onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for a single todo list item, including a dismissible list tile with a checkbox, title, and description.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/confirm_delete/confirm_delete_dialog.dart",
      "description": "The `ConfirmDeleteDialog` class is responsible for displaying a confirmation dialog to the user when they are about to delete an item. It provides a standardized way to handle the delete confirmation process, ensuring a consistent user experience across the application.",
      "class_diagram": "@startuml\nclass ConfirmDeleteDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the confirmation dialog, displaying the delete confirmation message and providing 'Cancel' and 'Delete' buttons.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of reusable UI helper functions and constants that simplify the layout and styling of Flutter UI components. It aims to improve the consistency and responsiveness of the application's user interface.",
      "class_diagram": "@startuml\nclass UIHelpers {\n    + const horizontalSpaceTiny: SizedBox\n    + const horizontalSpaceSmall: SizedBox\n    + const horizontalSpaceMedium: SizedBox\n    + const horizontalSpaceLarge: SizedBox\n    + const verticalSpaceTiny: SizedBox\n    + const verticalSpaceSmall: SizedBox\n    + const verticalSpaceMedium: SizedBox\n    + const verticalSpaceLarge: SizedBox\n    + const verticalSpaceMassive: SizedBox\n    + const spacedDivider: Column\n    + verticalSpace(double height): SizedBox\n    + screenWidth(BuildContext context): double\n    + screenHeight(BuildContext context): double\n    + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n    + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n    + halfScreenWidth(BuildContext context): double\n    + thirdScreenWidth(BuildContext context): double\n    + quarterScreenWidth(BuildContext context): double\n    + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n    + getResponsiveSmallFontSize(BuildContext context): double\n    + getResponsiveMediumFontSize(BuildContext context): double\n    + getResponsiveLargeFontSize(BuildContext context): double\n    + getResponsiveExtraLargeFontSize(BuildContext context): double\n    + getResponsiveMassiveFontSize(BuildContext context): double\n    + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the current screen height, optionally with an offset and a maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the current screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet with a title and description, providing a simple way to present important information to the user. It is part of the UI layer of the application and is used to display various types of notices or alerts.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required this.completer, required this.request})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class, which takes a `completer` function and a `request` object as parameters. The `completer` function is used to handle the user's response to the notice, while the `request` object contains the title and description to be displayed.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI for the `NoticeSheet`. It creates a container with a white background and rounded corners, and displays the title and description from the `request` object.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel`, which is the view model for the `NoticeSheet`. The view model is used to manage the state and logic associated with the notice sheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\nparticipant DialogService\nparticipant BottomSheetService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Fetch initial todo items\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nHomeViewModel -> TodoService: Get todo items\nUser -> HomeView: Interact (add, update, delete, filter)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoService: Perform CRUD operations\nHomeViewModel -> DialogService: Show todo detail dialog\nHomeViewModel -> BottomSheetService: Show add todo bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, with ViewModels handling the business logic and state for their respective views. The TodoService class is responsible for managing the state of the todo list, providing methods for CRUD operations and filtering. The ViewModels (e.g., HomeViewModel) interact with the TodoService to fetch, update, and manipulate the todo items, then notify the Views to update the UI accordingly. The DialogService and BottomSheetService are used to handle custom dialogs and bottom sheets, which are also integrated into the overall state management flow.",
  "navigation_flow": "The navigation within the application is managed using the Stacked Router, defined in the app.router.dart file. The main navigation flow is as follows:\n\n1. The app starts from the main.dart file, which creates and runs the AppView.\n2. The AppView initializes the Stacked architecture and presents the StartupView.\n3. The StartupViewModel runs the startup logic, such as fetching initial todo items, and then navigates to the HomeView.\n4. The HomeView is presented, allowing the user to interact with the todo list.\n5. User actions in the HomeView (e.g., adding a new todo, toggling completion) trigger updates in the HomeViewModel, which in turn updates the TodoService and notifies the HomeView to refresh the UI.\n6. The HomeViewModel can also show custom dialogs (via the DialogService) or bottom sheets (via the BottomSheetService) based on user interactions."
}