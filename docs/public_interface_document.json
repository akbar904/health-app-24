{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application follows the Stacked architecture, providing a well-structured and modular approach to development. It features a range of functionality, including a todo list management system, custom dialogs and bottom sheets, and a responsive user interface. Users can create, update, and delete todo items, toggle their completion status, and receive notifications through custom UI components.",
  "architecture_overview": "The application's architecture is based on the Stacked pattern, which separates concerns into distinct layers, including the app setup, features, UI components, and utilities. This design promotes modularity, testability, and maintainability. Key architectural components include the StackedApp, ViewModels, Services, and reusable UI Widgets.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and registering custom dialog builders for the application. It provides a centralized management of dialog-related functionality, making it easy to configure and reuse dialog interfaces across the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers custom dialog builders with the DialogService, allowing the app to display specific dialog types like InfoAlertDialog.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the service locator, which is a central registry for managing dependencies in the application. It is part of the StackedServices library, which provides a set of services for building Flutter applications.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary dependencies with the service locator. It allows the application to access these dependencies throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class is responsible for providing a user interface for adding a new todo item to the application. It is primarily used as a bottom sheet dialog that slides up from the bottom of the screen, allowing users to quickly and easily create new todo tasks.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  -TextEditingController _titleController\n  -TextEditingController _descriptionController\n  +AddTodoSheet(completer, request)\n  +State<AddTodoSheet> createState()\n  -_buildUI(context)\n}\n\nclass TodoModel {\n  +String id\n  +String title\n  +String description\n  +DateTime createdAt\n}\n@enduml",
      "methods": [
        {
          "name": "AddTodoSheet",
          "description": "Constructor for the `AddTodoSheet` class. It takes in a `completer` function and a `request` object, which are used to handle the completion and result of the bottom sheet interaction.",
          "parameters": [
            "Function(SheetResponse) completer",
            "SheetRequest request"
          ],
          "return_type": null
        },
        {
          "name": "createState",
          "description": "Overrides the `createState()` method to create the `_AddTodoSheetState` instance, which manages the state and UI of the bottom sheet.",
          "parameters": null,
          "return_type": "State<AddTodoSheet>"
        },
        {
          "name": "_buildUI",
          "description": "Builds the user interface of the bottom sheet, including text fields for the todo title and description, as well as buttons to cancel or add the new todo.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/models/todo_model.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the bottom sheet UI in the application. It defines the available bottom sheet types, sets up the custom sheet builders, and registers them with the BottomSheetService from the stacked_services package.",
      "class_diagram": "@startuml\n' Diagram for the BottomSheetHandler class\nclass BottomSheetHandler {\n  +setupBottomSheetUi(): void\n}\n\n' Diagram for the BottomSheetType enum\nenum BottomSheetType {\n  notice\n}\n\n' Diagram for the NoticeSheet class\nclass NoticeSheet {\n  +NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetHandler *-- BottomSheetType\nBottomSheetHandler *-- NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders and registers them with the BottomSheetService.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of helper functions and widgets that assist in the layout and styling of the user interface in a Flutter application. It contains utilities for creating consistent spacing, dividers, and responsive font sizes to ensure a cohesive and visually appealing UI across different screen sizes.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const Widget horizontalSpaceTiny\n  + static const Widget horizontalSpaceSmall\n  + static const Widget horizontalSpaceMedium\n  + static const Widget horizontalSpaceLarge\n  + static const Widget verticalSpaceTiny\n  + static const Widget verticalSpaceSmall\n  + static const Widget verticalSpaceMedium\n  + static const Widget verticalSpaceLarge\n  + static const Widget verticalSpaceMassive\n  + static Widget spacedDivider\n  + static Widget verticalSpace(double height)\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n  + static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a small horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a vertical space with the specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "A function that returns a fraction of the screen height, with optional offsets and maximum values.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width and a given font size and maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The TodoModel class is responsible for representing a single todo item within the application. It encapsulates the core data and state associated with a todo, including its unique identifier, title, description, completion status, creation date, and optional completion date.",
      "class_diagram": "@startuml\nclass TodoModel {\n  -String id\n  -String title\n  -String description\n  -bool isCompleted\n  -DateTime createdAt\n  -DateTime? completedAt\n\n  +TodoModel(id, title, description, {isCompleted = false, createdAt, completedAt})\n  +TodoModel copyWith({id, title, description, isCompleted, createdAt, completedAt})\n}\n@enduml",
      "methods": [
        {
          "name": "TodoModel",
          "description": "Constructs a new TodoModel instance with the provided properties.",
          "parameters": [
            "id",
            "title",
            "description",
            "isCompleted (optional, default: false)",
            "createdAt",
            "completedAt (optional)"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "copyWith",
          "description": "Creates a new TodoModel instance with one or more properties modified.",
          "parameters": [
            "id (optional)",
            "title (optional)",
            "description (optional)",
            "isCompleted (optional)",
            "createdAt (optional)",
            "completedAt (optional)"
          ],
          "return_type": "TodoModel"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines a custom InfoAlertDialog widget that provides a reusable UI component for displaying informative alerts or messages to users. The dialog is designed to be used within a Flutter app built with the stacked architecture.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog({required this.request, required this.completer})\n  +Widget builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child)\n  +InfoAlertDialogModel viewModelBuilder(BuildContext context)\n}\n\nclass InfoAlertDialogModel {\n}\n\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the InfoAlertDialog, including the title, description, and a custom graphic element.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the InfoAlertDialogModel, which handles the view logic for the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the state and operations of a todo list application. It provides the core functionality to create, update, delete, and toggle the completion status of todo items.",
      "class_diagram": "@startuml\nclass TodoService {\n  - _todos: List<TodoModel>\n  + get todos: List<TodoModel>\n  + addTodo(TodoModel todo): void\n  + updateTodo(TodoModel updatedTodo): void\n  + deleteTodo(String todoId): void\n  + toggleTodoCompletion(String todoId): void\n  + getTodoById(String todoId): TodoModel?\n}\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list",
          "parameters": [
            "TodoModel updatedTodo"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list",
          "parameters": [
            "String todoId"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item",
          "parameters": [
            "String todoId"
          ],
          "return_type": "void"
        },
        {
          "name": "getTodoById",
          "description": "Retrieves a todo item by its unique identifier",
          "parameters": [
            "String todoId"
          ],
          "return_type": "TodoModel?"
        }
      ],
      "dependencies": [
        "my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/edit_todo/edit_todo_sheet.dart",
      "description": "The EditTodoSheet class is responsible for providing a user interface for editing the details of a todo item. It allows the user to update the title and description of a todo and saves the changes.",
      "class_diagram": "@startuml\nclass EditTodoSheet {\n  +final Function(SheetResponse) completer\n  +final SheetRequest request\n  +State<EditTodoSheet> createState()\n}\n\nclass _EditTodoSheetState {\n  -late TextEditingController _titleController\n  -late TextEditingController _descriptionController\n  +void initState()\n  +void dispose()\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "initState",
          "description": "Initializes the TextEditingControllers with the existing todo item data.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Disposes of the TextEditingControllers when the widget is destroyed.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Builds the UI for the edit todo sheet, including text fields for the title and description, and buttons to save or cancel the changes.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/models/todo_model.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of consistent color values used throughout the application's user interface. It provides a centralized location to manage and apply the application's primary color palette, ensuring visual consistency and branding across the entire UI.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/todo_item.dart",
      "description": "The `TodoItem` class is responsible for rendering a single to-do item in the application's user interface. It provides a reusable widget that displays the to-do item's title, description, creation and completion dates, and allows the user to toggle the completion status, edit, or delete the to-do item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +TodoModel todo\n  +VoidCallback onToggle\n  +VoidCallback onEdit\n  +VoidCallback onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for a single to-do item, including the title, description, creation and completion dates, and buttons to toggle completion, edit, and delete the item.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/models/todo_model.dart",
        "package:intl/intl.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of the notice sheet UI component in the application. It provides the functionality to display and interact with the notice sheet, which is a common UI element used to present important information or updates to the user.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNoticeSheet(): void\n  +hideNoticeSheet(): void\n  +isNoticeSheetVisible: bool\n}\n@enduml",
      "methods": [
        {
          "name": "showNoticeSheet",
          "description": "Displays the notice sheet UI component, making it visible to the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "hideNoticeSheet",
          "description": "Hides the notice sheet UI component, making it no longer visible to the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "isNoticeSheetVisible",
          "description": "Returns a boolean value indicating whether the notice sheet UI component is currently visible or not.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/todo_list.dart",
      "description": "The TodoList widget is responsible for rendering a list of todo items, allowing the user to interact with them by toggling their completion status, editing them, or deleting them. It serves as the primary interface for displaying and managing the user's todo list within the application.",
      "class_diagram": "@startuml\nclass TodoList extends StatelessWidget {\n  List<TodoModel> todos\n  Function(String) onToggleTodo\n  Function(String) onEditTodo\n  Function(String) onDeleteTodo\n  \n  build(BuildContext): Widget\n}\n\nclass TodoItem {\n  TodoModel todo\n  Function() onToggle\n  Function() onEdit\n  Function() onDelete\n  \n  build(BuildContext): Widget\n}\n\nclass EmptyTodoState extends StatelessWidget {\n  build(BuildContext): Widget\n}\n\nTodoList *-- TodoItem\nTodoList *-- EmptyTodoState\nTodoItem o-- TodoModel\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the TodoList widget, which either displays a list of TodoItem widgets or an EmptyTodoState widget if the todo list is empty.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/todo_model.dart",
        "package:my_app/ui/widgets/empty_todo_state.dart",
        "package:my_app/ui/widgets/todo_item.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file contains the routing configuration for the Flutter application, defining the available navigation paths and the corresponding view/screen classes. It is responsible for managing the navigation flow and ensuring that the app's navigation is centralized and consistent.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass Routes {\n  +static const String homeView\n  +static const String startupView\n  +static const Set<String> all\n}\n\nclass NavigatorServiceExtension {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "StackedRouter.routes",
          "description": "Provides a list of all the defined navigation routes in the application.",
          "parameters": null,
          "return_type": "List<RouteDef>"
        },
        {
          "name": "StackedRouter.pagesMap",
          "description": "Provides a map of navigation routes to their corresponding view/screen classes.",
          "parameters": null,
          "return_type": "Map<Type, StackedRouteFactory>"
        },
        {
          "name": "NavigatorServiceExtension.navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorServiceExtension.navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorServiceExtension.replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorServiceExtension.replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is the view model for the app-level functionality in a Flutter application. It is responsible for managing the core application state and logic, which is shared across the entire app.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for the view model logic of the information alert dialog in the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "Constructs a new instance of the `InfoAlertDialogModel` class, which extends the `BaseViewModel` class from the `stacked` package.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/delete_todo/delete_todo_dialog.dart",
      "description": "This file contains the implementation of the `DeleteTodoDialog` class, which is responsible for displaying a confirmation dialog to the user when they want to delete a todo item. It provides a reusable UI component that can be easily integrated into the application's delete todo functionality.",
      "class_diagram": "@startuml\nclass DeleteTodoDialog {\n  + DeleteTodoDialog(request, completer)\n  + build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "DeleteTodoDialog",
          "description": "Constructs a new instance of the `DeleteTodoDialog` class, taking in a `DialogRequest` object and a completion callback function.",
          "parameters": [
            "request",
            "completer"
          ],
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the UI for the delete todo confirmation dialog, including the title, description, and buttons for canceling or confirming the deletion.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/empty_todo_state.dart",
      "description": "The `EmptyTodoState` widget is responsible for rendering a placeholder UI when the user's todo list is empty. It provides a clear visual cue to the user that no todos have been created yet, and offers a call-to-action to add a new todo.",
      "class_diagram": "@startuml\nclass EmptyTodoState {\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the `EmptyTodoState` widget, which includes an icon, a title, and a description to indicate the empty todo state.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for rendering a bottom sheet UI component that displays a notice or alert message to the user. It is part of the UI layer of the application and integrates with the stacked architecture pattern.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +Widget builder(BuildContext, NoticeSheetModel, Widget?)\n  +NoticeSheetModel viewModelBuilder(BuildContext)\n}\n\nclass NoticeSheetModel {\n  # void initialize()\n  # void onTap()\n}\n\nNoticeSheet *-- NoticeSheetModel\nNoticeSheet o-- SheetResponse\nNoticeSheet o-- SheetRequest\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the NoticeSheet, displaying the title and description of the notice based on the provided SheetRequest.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the NoticeSheetModel, which manages the state and behavior of the NoticeSheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\nparticipant TodoList\nparticipant TodoItem\nparticipant AddTodoSheet\nparticipant EditTodoSheet\nparticipant DeleteTodoDialog\nparticipant NoticeSheetModel\n\nUser -> AppView: Launch app\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Fetch initial todo items\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoService: Perform CRUD operations\nHomeViewModel -> DialogService: Show delete todo dialog\nHomeViewModel -> BottomSheetService: Show add/edit todo sheet\nDialogService -> DeleteTodoDialog: Render delete confirmation\nBottomSheetService -> AddTodoSheet: Render add todo sheet\nBottomSheetService -> EditTodoSheet: Render edit todo sheet\nTodoService -> TodoList: Update todo items\nTodoList -> TodoItem: Render todo items\nNoticeSheetModel -> BottomSheetService: Show notice sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, which follows the MVVM (Model-View-ViewModel) pattern. Each view (e.g., HomeView) has a corresponding ViewModel (e.g., HomeViewModel) that handles the business logic and state changes. The ViewModels use Reactive Programming principles to update the UI when the state changes. The TodoService is a singleton service that manages the todo items and provides a centralized data source. This separation of concerns between the UI, business logic, and data layers promotes testability and maintainability.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in the app.router.dart file. The router provides a centralized configuration for the available routes, including the HomeView and StartupView. The NavigatorService from the Stacked Services library is used to handle navigation between screens, ensuring a consistent and reliable navigation flow throughout the application."
}